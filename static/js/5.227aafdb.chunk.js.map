{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","_useState5","_useState6","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","json","ok","Error","concat","status","abrupt","t0","massage","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","_ref2","_callee2","name","_context2","getCharacter","_ref3","_callee3","id","_context3","_x2","getAllComic","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","View","imgStyle","_jsxs","className","children","href","RandomChar","setchar","_useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setcharList","newItemLoading","setNewItemLoading","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","f","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","_Fragment","CharInfo","charId","setContent","ErrorBoundary","_PureComponent","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","value","errorInfo","console","log","this","setState","PureComponent","CharSearchForm","setChar","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","MainPage","selectedChar","Helmet","decoration"],"mappings":"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","file":"static/js/5.227aafdb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: \"block\",\n        width: \"250px\",\n        height: \"250px\",\n        objectFit: \"contain\",\n        margin: \"0 auto\",\n      }}\n      src={img}\n      alt=\"Error\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { loading, request, error, clearError, process, setProcess } =\n    useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=a9fcceddf72b2bba2170a4db6fd36de0\";\n  const _baseoffset = 210;\n\n  const getAllCharacters = async (offset = _baseoffset) => {\n    const res = await request(\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacterByName = async (name) => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getAllComic = async (offset = 0) => {\n    const res = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : \"There is no description for this character\",\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} p.`\n        : \"No information about the number of pages\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: comics.textObjects[0]?.language || \"en-us\",\n\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : \"not available\",\n    };\n  };\n\n  return {\n    loading,\n    error,\n    clearError,\n    process,\n    setProcess,\n    getAllCharacters,\n    getCharacterByName,\n    getCharacter,\n    getAllComic,\n    getComic,\n  };\n};\n\nexport default useMarvelService;\n","import { useCallback, useState } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [process, setProcess] = useState(\"waiting\");\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"aplication/json\" }\n    ) => {\n      setLoading(true);\n      setProcess(\"loading\");\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n        const data = await response.json();\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n        setLoading(false);\n        return data;\n      } catch (e) {\n        setLoading(false);\n        setError(e.massage);\n        setProcess(\"error\");\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => {\n    setError(null);\n    setProcess(\"loading\");\n  }, []);\n\n  return { loading, clearError, request, error, process, setProcess };\n};\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useEffect, useState } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setchar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setchar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useEffect, useRef, useState } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport PropTypes from \"prop-types\";\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [charList, setcharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setcharList((charList) => [...charList, ...newCharList]);\n\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEnded((charEnded) => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <li\n          className=\"char__item\"\n          f\n          tabIndex={0}\n          ref={(el) => (itemRefs.current[i] = el)}\n          key={item.id}\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n          onKeyPress={(e) => {\n            if (e.key === \" \" || e.key === \"Enter\") {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }\n          }}\n        >\n          <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n    return <ul className=\"char__grid\">{items}</ul>;\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setchar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharLoaded = (char) => {\n    setchar(char);\n  };\n\n  const setContent = (process, char) => {\n    switch (process) {\n      case \"waiting\":\n        return <Skeleton />;\n        break;\n      case \"loading\":\n        return <Spinner />;\n        break;\n      case \"confirmed\":\n        return <View char={char} />;\n        break;\n      case \"error\":\n        return <ErrorMessage />;\n        break;\n      default:\n        throw new Error(\"Unexpected process state\");\n    }\n  };\n\n  // const skeleton = char || loading || error ? null : <Skeleton />;\n  // const errorMessage = error ? <ErrorMessage /> : null;\n  // const spinner = loading ? <Spinner /> : null;\n  // const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return <div className=\"char__info\">{setContent(process, char)}</div>;\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics && comics.length > 0 ? (\n          comics.map((item, i) => {\n            if (i > 9) return null;\n            return (\n              <li key={i} className=\"char__comics-item\">\n                {item.name}\n              </li>\n            );\n          })\n        ) : (\n          <li className=\"char__comics-item\">\n            There is no comics with this character\n          </li>\n        )}\n      </ul>\n    </>\n  );\n};\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { PureComponent } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends PureComponent {\n  state = {\n    error: false,\n  };\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error: true,\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport {\n  Formik,\n  Form,\n  Field,\n  ErrorMessage as FormikErrorMessage,\n} from \"formik\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./CharSearchForm.scss\";\n\nconst CharSearchForm = () => {\n  const [char, setChar] = useState(null);\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = (name) => {\n    clearError();\n\n    getCharacterByName(name).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? (\n    <div className=\"char__search-critical-error\">\n      <ErrorMessage />\n    </div>\n  ) : null;\n  const results = !char ? null : char.length > 0 ? (\n    <div className=\"char__search-wrapper\">\n      <div className=\"char__search-success\">\n        There is! Visit {char[0].name} page?\n      </div>\n      <Link\n        to={`/characters/${char[0].id}`}\n        className=\"button button__secondary\"\n      >\n        <div className=\"inner\">To page</div>\n      </Link>\n    </div>\n  ) : (\n    <div className=\"char__search-error\">\n      The character was not found. Check the name and try again\n    </div>\n  );\n\n  return (\n    <div className=\"char__search-form\">\n      <Formik\n        initialValues={{\n          charName: \"\",\n        }}\n        validationSchema={Yup.object({\n          charName: Yup.string().required(\"This field is required\"),\n        })}\n        onSubmit={({ charName }) => {\n          updateChar(charName);\n        }}\n      >\n        <Form>\n          <label className=\"char__search-label\" htmlFor=\"charName\">\n            Or find a character by name:\n          </label>\n          <div className=\"char__search-wrapper\">\n            <Field\n              id=\"charName\"\n              name=\"charName\"\n              type=\"text\"\n              placeholder=\"Enter name\"\n            />\n            <button\n              type=\"submit\"\n              className=\"button button__main\"\n              disabled={loading}\n            >\n              <div className=\"inner\">find</div>\n            </button>\n          </div>\n          <FormikErrorMessage\n            component=\"div\"\n            className=\"char__search-error\"\n            name=\"charName\"\n          />\n        </Form>\n      </Formik>\n      {results}\n      {errorMessage}\n    </div>\n  );\n};\n\nexport default CharSearchForm;\n","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport decoration from \"../../resources/img/vision.png\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\n\nconst MainPage = () => {\n  const [selectedChar, setchar] = useState(null);\n\n  const onCharSelected = (id) => {\n    setchar(id);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Marvel information portal\" />\n        <title>Marvel information portal</title>\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <div>\n          <ErrorBoundary>\n            <CharInfo charId={selectedChar} />\n          </ErrorBoundary>\n          <ErrorBoundary>\n            <CharSearchForm />\n          </ErrorBoundary>\n        </div>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  );\n};\nexport default MainPage;\n"],"sourceRoot":""}